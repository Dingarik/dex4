-- its not my script









-- https://github.com/LorekeeperZinnia/Dex

--[[
New Dex
Final Version
Developed by Moon
Modified for Infinite Yield

Dex is a debugging suite designed to help the user debug games and find any potential vulnerabilities.

This is the final version of this script.
You are encouraged to edit, fork, do whatever with this. I pretty much won't be updating it anymore.
Though I would appreciate it if you kept the credits in the script if you enjoy this hard work.

If you want more info, you can join the server: https://discord.io/zinnia
Note that very limited to no support will be provided.
]]

local nodes = {}
local selection
local clonerefs = cloneref or function(...) return ... end

local EmbeddedModules = {
Explorer = function()
--[[
Explorer App Module

The main explorer interface
]]

-- Common Locals
local Main,Lib,Apps,Settings -- Main Containers
local Explorer, Properties, ScriptViewer, Notebook -- Major Apps
local API,RMD,env,service,plr,create,createSimple -- Main Locals

local function initDeps(data)
Main = data.Main
Lib = data.Lib
Apps = data.Apps
Settings = data.Settings

API = data.API
RMD = data.RMD
env = data.env
service = data.service
plr = data.plr
create = data.create
createSimple = data.createSimple
end

local function initAfterMain()
Explorer = Apps.Explorer
Properties = Apps.Properties
ScriptViewer = Apps.ScriptViewer
Notebook = Apps.Notebook
end

local function main()
local Explorer = {}
local tree,listEntries,explorerOrders,searchResults,specResults = {},{},{},{},{}
local expanded
local entryTemplate,treeFrame,toolBar,descendantAddedCon,descendantRemovingCon,itemChangedCon
local ffa = game.FindFirstAncestorWhichIsA
local getDescendants = game.GetDescendants
local getTextSize = service.TextService.GetTextSize
local updateDebounce,refreshDebounce = false,false
local nilNode = {Obj = Instance.new("Folder")}
local idCounter = 0
local scrollV,scrollH,clipboard
local renameBox,renamingNode,searchFunc
local sortingEnabled,autoUpdateSearch
local table,math = table,math
local nilMap,nilCons = {},{}
local connectSignal = game.DescendantAdded.Connect
local addObject,removeObject,moveObject = nil,nil,nil

addObject = function(root)
if nodes[root] then return end

local isNil = false
local rootParObj = ffa(root,"Instance")
local par = nodes[rootParObj]

-- Nil Handling
if not par then
if nilMap[root] then
nilCons[root] = nilCons[root] or {
connectSignal(root.ChildAdded,addObject),
connectSignal(root.AncestryChanged,moveObject),
}
par = nilNode
isNil = true
else
return
end
elseif nilMap[rootParObj] or par == nilNode then
nilMap[root] = true
nilCons[root] = nilCons[root] or {
connectSignal(root.ChildAdded,addObject),
connectSignal(root.AncestryChanged,moveObject),... (осталось: 368 кб)
